@model NRLObstacleReporting.Models.ObstacleStep2Model


<div class="h-dvh overflow-hidden rounded-xl" >
    <h1 class="display-4 text-center">Place your obstacle</h1>
    <section>
        <div id="map" style="height: 65dvh; width: 100dvw; border-radius: 0.75rem; overflow: hidden; border: 1px solid #e5e7eb;">
        </div>
        <div>
            <label for="CoordinatesPreview" class="block text-sm font-medium text-gray-800 mb-1">Coordinates Preview</label>
            <textarea id="CoordinatesPreview" class="block w-full rounded-lg border-gray-300 px-3 py-2 text-sm" readonly placeholder="Draw on the map to see coordinates here..."></textarea>
        </div>
    <form asp-action="DataformStep2" method="post">
        <input type="hidden" asp-for="GeometryGeoJson" id="GeometryGeoJson" />
        <input asp-for="ObstacleId" type="hidden" value="@TempData.Peek("id")" />

        <div>
            <button class="inline-block items-center rounded-lg py-3 px-6 font-semibold text-white bg-blue-500 hover:bg-blue-700 transition-colors duration-200"
                    type="submit" formaction="/Obstacle/DataformStep2" id="nextpage" >Next Page</button>
            <button class="inline-block items-center rounded-lg py-3 px-6 font-semibold text-white bg-blue-500 hover:bg-blue-700 transition-colors duration-200"
                    type="submit" formaction="/Obstacle/DataformStep2" id="savebutton" >Save Draft</button>
        </div>
        <input type="hidden" asp-for="SaveDraft" id="save"/>
    </form>
    </section>
</div>

@* Script to add a map to the view *@
@section Scripts
{
    <script>
        //save draft or next step
        AssignValueByID('savebutton', 'save', true)
        AssignValueByID('nextpage', 'save', false)
    </script>
    
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
   
    <script>
        var map = L.map('map').setView([58.14671, 7.9956], 13);
    
        L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        // Initialize the feature group that will hold the drawn shapes
         var drawnItems = new L.FeatureGroup();
         map.addLayer(drawnItems);

         // Creates the drawing control on the left hand side
         // The drawing control enables drawing of markers, polygons, and polylines
        
        const choice = @TempData.Peek("ObstacleType")
        if (choice == 0 || choice == 3 || choice == 4 || choice == 5) 
        {
        var drawControl = new L.Control.Draw({
             draw: {
                 polygon: false,
                 polyline: true,
                 marker: true,
                 circle: false,  // Disable circle drawing
                 rectangle: false,
                 circlemarker: false
             },
             edit: {
                 featureGroup: drawnItems
             }
         });
         map.addControl(drawControl);
        }
        else
        {
            var drawControl = new L.Control.Draw({
                draw: {
                    polygon: false,
                    polyline: false,
                    marker: true,
                    circle: false,  // Disable circle drawing
                    rectangle: false,
                    circlemarker: false
                },
                edit: {
                    featureGroup: drawnItems
                }
            });
            map.addControl(drawControl);
        }
        
        var form = document.getElementById('DataformStep2');

        // --- Capture location data ---
        function captureData() {
            
            // Convert all layers to one GeoJSON object 
            var geojson = drawnItems.toGeoJSON();

            // Save JSON text to hidden field 
            document.getElementById('GeometryGeoJson').value = JSON.stringify(geojson);

            // Save preview text to hidden field
            document.getElementById('CoordinatesPreview').value = JSON.stringify(geojson);
        }
        
        // --- Delete location data ---
        function deleteData() {
            drawnItems.clearLayers();
            document.getElementById('GeometryGeoJson').value = "";
            document.getElementById('CoordinatesPreview').value = "";
        }

        function onCreated(e) {
            drawnItems.addLayer(e.layer);
            captureData();
        }

        function onEdited(e) {
            captureData();
        }

        function onDeleted(e) {
            deleteData();
        }

        // Event handlers
        map.on(L.Draw.Event.CREATED, onCreated);
        map.on(L.Draw.Event.EDITED, onEdited);
        map.on(L.Draw.Event.DELETED, onDeleted);

        // marker validation: ensure at least one marker exists
        form.addEventListener('nextpage', function (ev) {
            if (drawnItems.getLayers().length === 0) {
                ev.preventDefault();   // stops submission when the condition is true
                alert('Please add a marker on the map before submitting.');
            } else {
                captureData(); // ensure hidden field is updated
            }
});
    </script>

    <partial name="_ValidationScriptsPartial" />
}